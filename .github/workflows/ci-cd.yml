name: CI/CD Pipeline for macOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: self-hosted
    steps:
    - name: Debug Environment Variables
      run: |
        echo "NODE_OPTIONS: $NODE_OPTIONS"
        echo "Path: $PATH"
        echo "All environment variables:"
        env

    - uses: actions/checkout@v2

    - name: Debug After Checkout
      run: |
        echo "Current working directory after checkout: $(pwd)"
        echo "Contents of current directory after checkout:"
        ls -la
        echo "Contents of _work directory:"
        ls -la $RUNNER_WORKSPACE

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Verify Node.js Setup
      run: |
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Which node: $(which node)"
        echo "Which npm: $(which npm)"

    - name: Clear NODE_OPTIONS
      run: unset NODE_OPTIONS

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install frontend dependencies
      run: |
        unset NODE_OPTIONS
        cd frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Install backend dependencies
      run: |
        unset NODE_OPTIONS
        cd backend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --passWithNoTests

    - name: Run backend tests
      run: |
        cd backend
        npm test

  build-and-push-docker:
    needs: build-and-test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          brew install docker docker-compose
          brew install --cask docker
          open -a Docker

      - name: Wait for Docker to start
        run: |
          while ! docker system info > /dev/null 2>&1; do
            echo "Waiting for Docker to start..."
            sleep 1
          done

      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and push frontend Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }} -f frontend/Dockerfile frontend --push

      - name: Build and push backend Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }} -f backend/Dockerfile backend --push

  deploy-and-test:
    needs: build-and-push-docker
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: Install kubectl
        run: brew install kubectl

      - name: Install Kind
        run: brew install kind

      - name: Create k8s Kind Cluster
        run: kind create cluster --name test-cluster

      - name: Deploy to Kind Cluster
        run: |
          sed -i '' "s|image: .*frontend:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}|" k8s/*frontend*.yaml
          sed -i '' "s|image: .*backend:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }}|" k8s/*backend*.yaml
          kubectl apply -f k8s/
          kubectl wait --for=condition=available --timeout=600s deployment --all
          kubectl get pods
          kubectl get services

      - name: Port forward services
        run: |
          kubectl port-forward service/frontend 3000:3000 &
          kubectl port-forward service/backend 3001:3000 &
          sleep 10

      - name: Test deployed services
        run: |
          curl http://localhost:3000 || echo "Frontend not responding"
          curl http://localhost:3001/api/products || echo "Backend not responding"

      - name: Clean up
        if: always()
        run: kind delete cluster --name test-cluster