name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Debug Environment
        run: |
          echo "PWD: $PWD"
          echo "HOME: $HOME"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "Path:"
          echo $PATH | tr ':' '\n'
          echo "Contents of current directory:"
          ls -la
        shell: bash

      - name: Get Date
        id: get-date
        run: |
          CURRENT_DATE=$(date -u '+%Y-%m-%d')
          echo "Current date is $CURRENT_DATE"
          echo "::set-output name=date::$CURRENT_DATE"
        shell: bash

      - name: Echo Date
        run: echo "The date is ${{ steps.get-date.outputs.date }}"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ steps.get-date.outputs.date }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-npm-

      - name: Install frontend dependencies
        run: |
          cd frontend || exit
          npm ci || npm install
        shell: bash

      - name: Install backend dependencies
        run: |
          cd backend || exit
          npm ci || npm install
        shell: bash

      - name: Run frontend tests
        run: |
          cd frontend || exit
          npm test -- --passWithNoTests
        shell: bash

      - name: Run backend tests
        run: |
          cd backend || exit
          npm test
        shell: bash

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }}

  deploy-and-test:
    needs: build-and-push-docker
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: Install kubectl
        run: |
          brew install kubectl

      - name: Install Kind
        run: |
          brew install kind

      - name: Create k8s Kind Cluster
        run: |
          kind create cluster --name test-cluster

      - name: Deploy to Kind Cluster
        run: |
          # Update image tags in deployment files
          sed -i '' 's|image: .*frontend:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}|' k8s/*frontend*.yaml
          sed -i '' 's|image: .*backend:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }}|' k8s/*backend*.yaml
          
          # Apply all kubernetes manifests
          kubectl apply -f k8s/
          
          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=600s deployment --all
          
          # Display status
          kubectl get pods
          kubectl get services

      - name: Port forward services (for demonstration)
        run: |
          kubectl port-forward service/frontend 3000:3000 &
          kubectl port-forward service/backend 3001:3000 &
          sleep 10  # Give some time for port forwarding to establish

      - name: Test deployed services
        run: |
          curl http://localhost:3000 || echo "Frontend not responding"
          curl http://localhost:3001/api/products || echo "Backend not responding"

      - name: Set up SSH access
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SSH_PUBLIC_KEY" > ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/authorized_keys
          sudo /usr/sbin/sshd

      - name: Display connection information
        run: |
          echo "To connect to the GitHub Actions runner, use the following command:"
          echo "ssh -i /path/to/your/private_key runner@$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
          echo "Then, in a new terminal:"
          echo "kubectl --kubeconfig <(ssh -i /path/to/your/private_key runner@$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4) 'cat ~/.kube/config') get pods"
          echo "Or for k9s:"
          echo "k9s --kubeconfig <(ssh -i /path/to/your/private_key runner@$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4) 'cat ~/.kube/config')"

      - name: Keep runner alive
        run: sleep 1h  # Keeps the runner alive for 1 hour for SSH access

      - name: Clean up
        if: always()
        run: |
          kind delete cluster --name test-cluster