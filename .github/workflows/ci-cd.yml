name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: self-hosted
#    runs-on: ubuntu-latest
    services:
      ssh:
        image: rastasheep/ubuntu-sshd:18.04
        ports:
          - 22
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install frontend dependencies
        run: |
          cd frontend
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Install backend dependencies
        run: |
          cd backend
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --passWithNoTests

      - name: Run backend tests
        run: |
          cd backend
          npm test

  build-and-push-docker:
    needs: build-and-test
    runs-on: self-hosted
#    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }}

  build-and-deploy:
    needs: build-and-test
    runs-on: self-hosted
#    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }}

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0

#      - name: Deploy to Kind Cluster
#        run: |
#          kubectl create deployment frontend --image=${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}
#          kubectl create deployment backend --image=${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }}
#          kubectl expose deployment frontend --type=NodePort --port=3000
#          kubectl expose deployment backend --type=NodePort --port=3000
#          kubectl get pods
#          kubectl get services

#      - name: Wait for deployments
#        run: |
#          kubectl wait --for=condition=available --timeout=600s deployment/frontend
#          kubectl wait --for=condition=available --timeout=600s deployment/backend


      - name: Deploy to Kind Cluster
        run: |
          # Update image tags in deployment files
          sed -i 's|image: .*frontend:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}|' k8s/*frontend*.yaml
          sed -i 's|image: .*backend:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/ecommerce-backend:${{ github.sha }}|' k8s/*backend*.yaml
          
          # Apply all kubernetes manifests
          kubectl apply -f k8s/
          
          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=600s deployment --all
          
          # Display status
          kubectl get pods
          kubectl get services


      - name: Port forward services (for demonstration)
        run: |
          kubectl port-forward service/frontend 3000:3000 &
          kubectl port-forward service/backend 3001:3000 &
          sleep 10  # Give some time for port forwarding to establish

      - name: Test deployed services
        run: |
          curl http://localhost:3000 || echo "Frontend not responding"
          curl http://localhost:3001/api/products || echo "Backend not responding"

      - name: Set up SSH access
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SSH_PUBLIC_KEY" > ~/.ssh/authorized_keys
          chmod 600 ~/.ssh/authorized_keys
          sudo sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config
          sudo sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config
          sudo service ssh restart
          echo "SSH_CONNECTION_STRING=localhost" >> $GITHUB_ENV

      - name: Display connection information
        run: |
          echo "To connect to the GitHub Actions runner, use the following command:"
          echo "ssh -i /path/to/your/private_key -p ${{ job.services.ssh.ports[22] }} runner@localhost"
          echo "Then, in a new terminal:"
          echo "kubectl --kubeconfig <(ssh -i /path/to/your/private_key -p ${{ job.services.ssh.ports[22] }} runner@localhost 'cat ~/.kube/config') get pods"
          echo "Or for k9s:"
          echo "k9s --kubeconfig <(ssh -i /path/to/your/private_key -p ${{ job.services.ssh.ports[22] }} runner@localhost 'cat ~/.kube/config')"

      - name: Start SSH service
        run: sudo service ssh start

      - name: Keep runner alive
        run: sleep 1h  # Keeps the runner alive for 1 hour for SSH access